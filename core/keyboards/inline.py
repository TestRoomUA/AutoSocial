import random
from typing import List

from aiogram.utils.keyboard import InlineKeyboardBuilder


def start_inline_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text='–¶–≤–µ—Ç—ã', callback_data='market')
    keyboard_builder.button(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts')
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


def contacts_inline_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='contacts_phone')
    keyboard_builder.button(text='–ù–∞—à–∞ —Ç–æ—á–∫–∞', url='https://maps.app.goo.gl/hWprhs6bS8NCAGM5A')
    keyboard_builder.button(text='–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª', url='https://t.me/+Xh2vMre6bmQ3MGU6')
    keyboard_builder.button(text='–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup(one_time_keyboard=True)


def market_start_keyboard(tags: List[str] | None = None):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text='–•–ò–¢ –°–ï–ó–û–ù–ê', callback_data='post_create_0')
    if tags is not None:
        for tag in tags:
            keyboard_builder.button(text=f'{tag}', callback_data=f'post_create_0_{tag}')
    keyboard_builder.adjust(1, 2)
    return keyboard_builder.as_markup()


def market_product_keyboard(pageID: int, p_max: int, tag: str | None = None):
    keyboard_builder = InlineKeyboardBuilder()
    tag_str = ("_" + tag) if tag is not None else ""
    btns = 1
    if pageID > 0:
        btns += 1
        keyboard_builder.button(text='<', callback_data=f'post_edit_{pageID - 1}{tag_str}')
    keyboard_builder.button(text=f'({pageID + 1}/{p_max})', callback_data='current_page')
    if pageID < p_max - 1:
        btns += 1
        keyboard_builder.button(text='>', callback_data=f'post_edit_{pageID + 1}{tag_str}')
    keyboard_builder.button(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f'post_detailed_{pageID}{tag_str}')
    keyboard_builder.button(text='–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='market')
    keyboard_builder.adjust(btns, 1)
    return keyboard_builder.as_markup()


def detailed_product_keyboard(pageID: int, tag: str | None = None):
    keyboard_builder = InlineKeyboardBuilder()
    tag_str = ("_" + tag) if tag is not None else ""
    keyboard_builder.button(text='–ó–∞–∫–∞–∑–∞—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', callback_data=f'buy_{pageID}{tag_str}')
    keyboard_builder.button(text='< –í–µ—Ä–Ω—É—Ç—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É', callback_data=f'post_create_{pageID}{tag_str}')
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


def admin_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', callback_data='admin_product_list')
    keyboard_builder.button(text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data='admin_product_add')
    keyboard_builder.button(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data='admin_product_remove')
    keyboard_builder.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª', callback_data='admin_post_channel')
    keyboard_builder.button(text='–í—ã–π—Ç–∏ —Å –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞', callback_data='admin_logout')
    keyboard_builder.adjust(1, 2, 1)
    return keyboard_builder.as_markup()


def product_test_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text='–ó–∞–∫–∞–∑–∞—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', callback_data='test_product_buy')
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


def added_product(db_id: int):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç—å—é –Ω–∞ –∫–∞–Ω–∞–ª–µ', callback_data=f'share_to_channel_{db_id}')
    keyboard_builder.button(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç', callback_data=f'admin_product_add')
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


def pay_keyboard(page: int, tag: str | None = None):
    keyboard_builder = InlineKeyboardBuilder()
    tag_str = ("_" + tag) if tag is not None else ''
    keyboard_builder.button(text='–æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', pay=True)
    keyboard_builder.button(text='cc—ã–ª–∫–∞ (–ø–æ–∫–∞ –Ω–µ—Ç—É)', url='https://google.com')
    keyboard_builder.button(text='< –í–µ—Ä–Ω—É—Ç—Å—è', callback_data=f'post_create_{page}{tag_str}')
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


def channel_post_keyboard(link: str):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text=f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É {random.choice(['üíê','üèµÔ∏è','üíÆ','üå∏','üåπ','üå∫','üåª','üåº','üå∑'])}", url=link)
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


def channel_new_post_keyboard(text: str, link: str):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text=text, url=link)
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()